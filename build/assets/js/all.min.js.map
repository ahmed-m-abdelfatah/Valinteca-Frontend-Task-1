{"version":3,"sources":["validation.js"],"names":["form","document","querySelector","inputs","username","getElementById","email","password","cPassword","regex","pattern","errorMsg","areAllFieldsHaveContent","let","emptyFields","key","input","value","trim","showError","isVaLidPattern","test","message","inputGroup","parentElement","className","textContent","clearErrors","addEventListener","areTwoPasswordsTheSame","pass1","pass2","toLowerCase","async","apiReq","reqBody","current","name","console","log","res","await","fetch","headers","Accept","Content-Type","method","body","JSON","stringify","e","preventDefault","check1","check2","check3","check4","check5"],"mappings":"AACA,MAAAA,KAAAC,SAAAC,cAAA,OAAA,EACAC,OAAA,CACAC,SAAAH,SAAAI,eAAA,UAAA,EACAC,MAAAL,SAAAI,eAAA,OAAA,EACAE,SAAAN,SAAAI,eAAA,UAAA,EACAG,UAAAP,SAAAI,eAAA,YAAA,CACA,EACAI,MAAA,CACAH,MAAA,CACAI,QAAA,0BACAC,SAAA,oBACA,EACAP,SAAA,CACAM,QAAA,sCACAC,SACA,gIACA,EACAJ,SAAA,CACAG,QAAA,uEACAC,SACA,8HACA,CACA,EAGA,SAAAC,wBAAAT,GACAU,IAAAC,EAAA,EAEA,IAAA,MAAAC,KAAAZ,EAAA,CACA,IAAAa,EAAAb,EAAAY,GACA,KAAAC,EAAAC,MAAAC,KAAA,IACAC,UAAAH,EAAA,wBAAA,EACAF,CAAA,GAEA,CAEA,OAAA,IAAAA,CACA,CAEA,SAAAM,eAAAX,EAAAO,GACA,MAAA,CAAA,IAAAP,EAAAC,QAAAW,KAAAL,EAAAC,MAAAC,KAAA,CAAA,IAIAC,UAAAH,EAAAP,EAAAE,QAAA,EACA,CAAA,EACA,CAEA,SAAAQ,UAAAH,EAAAM,GACAC,EAAAP,EAAAQ,cAAAA,cACAD,EAAAE,UAAA,oBACAF,EAAArB,cAAA,YAAA,EACAwB,YAAAJ,CACA,CAEA,SAAAK,YAAAxB,GACA,IAAA,MAAAY,KAAAZ,EAAA,CACA,MAAAa,EAAAb,EAAAY,GACAC,EAAAY,iBAAA,SAAA,KACA,IAAAL,EAAAP,EAAAQ,cAAAA,cACAD,EAAAE,UAAA,cACAF,EAAArB,cAAA,YAAA,EACAwB,YAAA,EACA,CAAA,CACA,CACA,CAEA,SAAAG,uBAAAC,EAAAC,GACA,OAAAD,EAAAE,YAAA,IAAAD,EAAAC,YAAA,IAIAb,UAAAhB,OAAAK,UAAA,uDAAA,EACA,CAAA,EACA,CAEAyB,eAAAC,SACArB,IAAAsB,EAAA,GACA,IAAA,MAAApB,KAAAZ,OAAA,CACA,IAAAiC,EAAAjC,OAAAY,GACAoB,EAAA,CAAA,GAAAA,GAAAC,EAAAC,MAAAD,EAAAnB,KAAA,CACA,CAEAqB,QAAAC,IAAA,UAAAJ,CAAA,EACAtB,IAAA2B,EAAAC,MAAAC,MAAA,gDAAA,CACAC,QAAA,CACAC,OAAA,mBACAC,eAAA,kBACA,EACAC,OAAA,OACAC,KAAAC,KAAAC,UAAAd,CAAA,CACA,CAAA,EAEAG,QAAAC,IAAA,MAAAC,CAAA,CACA,CAGAxC,KAAA4B,iBAAA,SAAAsB,MAAAA,IACAA,EAAAC,eAAA,EAGAxB,YAAAxB,MAAA,EAGAU,IAAAuC,EAAAhC,eAAAX,MAAAL,SAAAD,OAAAC,QAAA,EACAiD,EAAAjC,eAAAX,MAAAH,MAAAH,OAAAG,KAAA,EACAgD,EAAAlC,eAAAX,MAAAF,SAAAJ,OAAAI,QAAA,EACAgD,EAAA1B,uBAAA1B,OAAAI,SAAAU,MAAAd,OAAAK,UAAAS,KAAA,EACAuC,EAAA5C,wBAAAT,MAAA,EAEAiD,GAAAC,GAAAC,GAAAC,GAAAC,IACAf,MAAAP,OAAA,EACAI,QAAAC,IAAA,UAAA,EAEA,CAAA","file":"all.min.js","sourcesContent":["// get all Fields\nconst form = document.querySelector('.form');\nconst inputs = {\n  username: document.getElementById('username'),\n  email: document.getElementById('email'),\n  password: document.getElementById('password'),\n  cPassword: document.getElementById('c-password'),\n};\nconst regex = {\n  email: {\n    pattern: /^[A-Za-z0-9+_.-]+@(.+)$/,\n    errorMsg: 'Email is not valid',\n  },\n  username: {\n    pattern: /^[a-zA-Z][a-zA-Z0-9]{3,13}[a-zA-Z]$/,\n    errorMsg:\n      'Username must consist of 5 to 15 characters, only letters and numbers are allowed, with no numbers at the beginning or the end',\n  },\n  password: {\n    pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n    errorMsg:\n      'Password minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character',\n  },\n};\n\n// logic\nfunction areAllFieldsHaveContent(inputs) {\n  let emptyFields = 0;\n\n  for (const key in inputs) {\n    const input = inputs[key];\n    if (input.value.trim() === '') {\n      showError(input, 'This field is required');\n      emptyFields++;\n    }\n  }\n\n  return emptyFields === 0;\n}\n\nfunction isVaLidPattern(regex, input) {\n  if (regex.pattern.test(input.value.trim()) === true) {\n    return true;\n  }\n\n  showError(input, regex.errorMsg);\n  return false;\n}\n\nfunction showError(input, message) {\n  const inputGroup = input.parentElement.parentElement;\n  inputGroup.className = 'input-group error';\n  const errorMsg = inputGroup.querySelector('.error-msg');\n  errorMsg.textContent = message;\n}\n\nfunction clearErrors(inputs) {\n  for (const key in inputs) {\n    const input = inputs[key];\n    input.addEventListener('change', () => {\n      const inputGroup = input.parentElement.parentElement;\n      inputGroup.className = 'input-group';\n      const errorMsg = inputGroup.querySelector('.error-msg');\n      errorMsg.textContent = '';\n    });\n  }\n}\n\nfunction areTwoPasswordsTheSame(pass1, pass2) {\n  if (pass1.toLowerCase() === pass2.toLowerCase()) {\n    return true;\n  }\n\n  showError(inputs.cPassword, 'Password and confirmation password should be the same');\n  return false;\n}\n\nasync function apiReq() {\n  let reqBody = {};\n  for (const key in inputs) {\n    const current = inputs[key];\n    reqBody = { ...reqBody, [current.name]: current.value };\n  }\n\n  console.log('reqBody', reqBody);\n  let res = await fetch('https://goldblv.com/api/hiring/tasks/register', {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    method: 'POST',\n    body: JSON.stringify(reqBody),\n  });\n\n  console.log('res', res);\n}\n\n// event\nform.addEventListener('submit', async e => {\n  e.preventDefault();\n\n  // clearErrors\n  clearErrors(inputs);\n\n  // checkRequired\n  let check1 = isVaLidPattern(regex.username, inputs.username);\n  let check2 = isVaLidPattern(regex.email, inputs.email);\n  let check3 = isVaLidPattern(regex.password, inputs.password);\n  let check4 = areTwoPasswordsTheSame(inputs.password.value, inputs.cPassword.value);\n  let check5 = areAllFieldsHaveContent(inputs);\n\n  if (check1 && check2 && check3 && check4 && check5) {\n    await apiReq();\n    console.log('api call');\n  }\n});\n"]}