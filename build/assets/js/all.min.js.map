{"version":3,"sources":["home.js","validation.js"],"names":["home","data","window","location","href","includes","JSON","parse","localStorage","getItem","id","length","document","getElementById","textContent","email","addEventListener","removeItem","validation","form","querySelector","inputs","username","password","cPassword","regex","pattern","errorMsg","isVaLidPattern","input","test","value","trim","showError","message","inputGroup","parentElement","className","password_confirmation","key","getElementsByName","e","preventDefault","clearErrors","let","check1","check2","check3","check4","pass1","pass2","toLowerCase","check5","emptyFields","async","reqBody","current","name","res","await","fetch","headers","Accept","Content-Type","method","body","stringify","json","console","log","ok","setItem","error","errors","allErrors","Object","hasOwnProperty","call","join"],"mappings":"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","file":"all.min.js","sourcesContent":["function home() {\r\n  if (window.location.href.includes('home.html')) {\r\n    // get data from localStorage\r\n\r\n    const data = JSON.parse(localStorage.getItem('userObj'));\r\n\r\n    if (data && data?.id.length > 0) {\r\n      // show email\r\n      const userEmail = document.getElementById('use-email');\r\n      userEmail.textContent = data.email;\r\n\r\n      // perform logout\r\n      const logout = document.getElementById('logout');\r\n      logout.addEventListener('click', () => {\r\n        localStorage.removeItem('userObj');\r\n        window.location.href = './index.html';\r\n      });\r\n    } else {\r\n      window.location.href = './register.html';\r\n    }\r\n  }\r\n}\r\nhome();\r\n","function validation() {\n  if (window.location.href.includes('register.html')) {\n    // get all Fields\n    const form = document.querySelector('.form');\n    const inputs = {\n      username: document.getElementById('username'),\n      email: document.getElementById('email'),\n      password: document.getElementById('password'),\n      cPassword: document.getElementById('c-password'),\n    };\n    const regex = {\n      email: {\n        pattern: /^[A-Za-z0-9+_.-]+@(.+)$/,\n        errorMsg: 'Email is not valid',\n      },\n      username: {\n        pattern: /^[a-zA-Z][a-zA-Z0-9]{3,13}[a-zA-Z]$/,\n        errorMsg:\n          'Username must consist of 5 to 15 characters, only letters and numbers are allowed, with no numbers at the beginning or the end',\n      },\n      password: {\n        pattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n        errorMsg:\n          'Password minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character',\n      },\n    };\n\n    // logic\n    function areAllFieldsHaveContent(inputs) {\n      let emptyFields = 0;\n\n      for (const key in inputs) {\n        const input = inputs[key];\n        if (input.value.trim() === '') {\n          showError(input, 'This field is required');\n          emptyFields++;\n        }\n      }\n\n      return emptyFields === 0;\n    }\n\n    function isVaLidPattern(regex, input) {\n      if (regex.pattern.test(input.value.trim()) === true) {\n        return true;\n      }\n\n      showError(input, regex.errorMsg);\n      return false;\n    }\n\n    function showError(input, message) {\n      const inputGroup = input.parentElement.parentElement;\n      inputGroup.className = 'input-group error';\n      const errorMsg = inputGroup.querySelector('.error-msg');\n      errorMsg.textContent = message;\n    }\n\n    function clearErrors(inputs) {\n      for (const key in inputs) {\n        const input = inputs[key];\n        input.addEventListener('change', () => {\n          const inputGroup = input.parentElement.parentElement;\n          inputGroup.className = 'input-group';\n          const errorMsg = inputGroup.querySelector('.error-msg');\n          errorMsg.textContent = '';\n        });\n      }\n    }\n\n    function areTwoPasswordsTheSame(pass1, pass2) {\n      if (pass1.toLowerCase() === pass2.toLowerCase()) {\n        return true;\n      }\n\n      showError(inputs.cPassword, 'Password and confirmation password should be the same');\n      return false;\n    }\n\n    async function apiReq() {\n      let reqBody = {};\n      for (const key in inputs) {\n        const current = inputs[key];\n        reqBody = { ...reqBody, [current.name]: current.value };\n      }\n\n      try {\n        let res = await fetch('https://goldblv.com/api/hiring/tasks/register', {\n          headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          },\n          method: 'POST',\n          body: JSON.stringify(reqBody),\n        });\n\n        const data = await res.json();\n        console.log('data', data.id.length);\n\n        if (res.ok) {\n          // save to local storage\n          if (data.id.length > 0) {\n            localStorage.setItem('userObj', JSON.stringify(data));\n\n            // got to home page\n            window.location.href = './home.html';\n          }\n        } else {\n          throw data;\n        }\n      } catch (error) {\n        // show error from api\n        console.log('error from api', error);\n\n        if (error?.errors) {\n          const allErrors = error.errors;\n\n          for (const key in allErrors) {\n            if (Object.hasOwnProperty.call(inputs, key)) {\n              const errorMsg = allErrors[key];\n              const element = inputs[key];\n              showError(element, errorMsg.join(', '));\n            }\n          }\n        }\n      }\n    }\n\n    function test() {\n      const data = {\n        username: 'ahmed',\n        email: 'ahmed@ahmed',\n        password: 'Ahmed@123',\n        password_confirmation: 'Ahmed@123',\n      };\n\n      for (const key in data) {\n        const el = document.getElementsByName(key);\n        el[0].value = data[key];\n      }\n    }\n    test();\n\n    // event\n    form.addEventListener('submit', async e => {\n      e.preventDefault();\n\n      // clearErrors\n      clearErrors(inputs);\n\n      // checkRequired\n      let check1 = isVaLidPattern(regex.username, inputs.username);\n      let check2 = isVaLidPattern(regex.email, inputs.email);\n      let check3 = isVaLidPattern(regex.password, inputs.password);\n      let check4 = areTwoPasswordsTheSame(inputs.password.value, inputs.cPassword.value);\n      let check5 = areAllFieldsHaveContent(inputs);\n\n      if (check1 && check2 && check3 && check4 && check5) {\n        await apiReq();\n      }\n    });\n  }\n}\nvalidation();\n"]}